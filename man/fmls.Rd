% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formulas.R
\name{fmls}
\alias{fmls}
\alias{key_terms}
\title{Vectorized formulas}
\usage{
fmls(
  x = unspecified(),
  pattern = c("direct", "sequential", "parallel", "fundamental"),
  ...
)

key_terms(x)
}
\arguments{
\item{x}{Objects of the following types can be used as inputs
\itemize{
\item \code{tm}
\item \code{formula}
}}

\item{pattern}{This is the expansion pattern used to decide how the
covariates will incorporated into the formulas. The options are
\code{c("direct", "sequential", "parallel")}. See the details for further
explanation.
\itemize{
\item \strong{direct}: the covariates will all be included in each formula
\item \strong{sequential}: the covariates will be added sequentially, one by one, or
by groups, as indicated
\item \strong{parallel}: the covariates or groups of covariates will be placed in
parallel
}}

\item{...}{Arguments to be passed to or from other methods}
}
\value{
An object of class \code{fmls}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This function defines a modified \code{formula} class that has been
vectorized. The \code{fmls} serves as a set of instructions or a \emph{script} for the
formula and its tm. It expands upon the functionality of formulas,
allowing for additional descriptions and relationships to exist between the
tm.
}
\details{
This is not meant to supersede a \code{\link[stats:formula]{stats::formula()}} object, but provide a
series of relationships that can be helpful in causal modeling. All \code{fmls}
can be converted to a traditional \code{formula} with ease. The base for this
object is built on the \code{\link[=tmls]{tmls()}} object.
}
\section{Patterns}{
The expansion pattern allows for instructions on how the covariates should be
included in different formulas. Below, assuming that \emph{x1}, \emph{x2}, and \emph{x3} are
covariates...

\deqn{y = x1 + x2 + x3}

\strong{Direct}:

\deqn{y = x1 + x2 + x3}

\strong{Seqential}:

\deqn{y = x1}
\deqn{y = x1 + x2}
\deqn{y = x1 + x2 + x3}

\strong{Parallel}:

\deqn{y = x1}
\deqn{y = x2}
\deqn{y = x3}
}

\section{Roles}{
Specific roles the variable plays within the formula. These are of particular
importance, as they serve as special terms that can effect how a formula is
interpreted.\tabular{lll}{
   Role \tab Shortcut \tab Description \cr
   outcome \tab \code{.o(...)} \tab exposure → \strong{outcome} \cr
   exposure \tab \code{.x(...)} \tab \strong{exposure} → outcome \cr
   predictor \tab \code{.p(...)} \tab exposure + \strong{predictor} → outcome \cr
   confounder \tab \code{.c(...)} \tab exposure ← \strong{confounder} → outcome \cr
   mediator \tab \code{.m(...)} \tab exposure → \strong{mediator} → outcome \cr
   interaction \tab \code{.i(...)} \tab exposure × \strong{interaction} → outcome \cr
   strata \tab \code{.s(...)} \tab exposure ÷ \strong{strata} → outcome \cr
   group \tab \code{.g(...)} \tab exposure + \strong{group} → outcome \cr
   \emph{unknown} \tab \code{-} \tab not yet assigned \cr
}


Formulas can be condensed by applying their specific role to individual runes
as a function/wrapper. For example, \code{y ~ .x(x1) + x2 + x3}. This would
signify that \code{x1} has the specific role of an \emph{exposure}.

Grouped variables are slightly different in that they are placed together in
a hierarchy or tier. To indicate the group and the tier, the shortcut can
have an \code{integer} following the \code{.g}. If no number is given, then it is
assumed they are all on the same tier. Ex: \code{y ~ x1 + .g1(x2) + .g1(x3)}

\strong{Warning}: Only a single shortcut can be applied to a variable within a
formula directly.
}

\section{Pluralized Arguments}{
For a single argument, e.g. for the \code{tm.formula()} method, such as to
identify variable \strong{X} as an exposure, a \code{formula} should be given with the
term of interest on the LHS, and the description or instruction on the RHS.
This would look like \code{role = X ~ "exposure"}.

For the arguments that would be dispatched for objects that are plural, e.g.
containing multiple terms, each \code{formula()} should be placed within a
\code{list()}. For example, the \strong{role} argument would be written:

\code{role = list(X ~ "exposure", M ~ "mediator", C ~ "confounder")}

Further implementation details can be seen in the implementation of
\code{\link[=list_of_formulas]{list_of_formulas()}}.
}

